{"version":3,"file":"ngx-clipboard.mjs","sources":["../../../projects/ngx-clipboard/src/lib/ngx-clipboard.service.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard.directive.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard-if-supported.directive.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard.module.ts","../../../projects/ngx-clipboard/src/public_api.ts","../../../projects/ngx-clipboard/src/ngx-clipboard.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Observable, Subject } from 'rxjs';\n\nimport { ClipboardParams, IClipboardResponse } from './interface';\n\n/**\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\n */\n@Injectable({ providedIn: 'root' })\nexport class ClipboardService {\n    private copySubject = new Subject<IClipboardResponse>();\n    public copyResponse$: Observable<IClipboardResponse> = this.copySubject.asObservable();\n    private tempTextArea: HTMLTextAreaElement | undefined;\n    private config: ClipboardParams = {};\n\n    constructor(\n        private ngZone: NgZone,\n        @Inject(DOCUMENT) public document: any,\n        @Optional() @Inject(WINDOW) private window: any\n    ) {}\n\n    public configure(config: ClipboardParams) {\n        this.config = config;\n    }\n\n    public copy(content: string): void {\n        if (!this.isSupported || !content) {\n            return this.pushCopyResponse({ isSuccess: false, content });\n        }\n        const copyResult = this.copyFromContent(content);\n        if (copyResult) {\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\n        }\n        return this.pushCopyResponse({ isSuccess: false, content });\n    }\n\n    public get isSupported(): boolean {\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n    }\n\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n            if (element.hasAttribute('disabled')) {\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n            }\n            return true;\n        }\n        throw new Error('Target should be input or textarea');\n    }\n\n    /**\n     * Attempts to copy from an input `targetElm`\n     */\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement, isFocus = true): boolean {\n        try {\n            this.selectTarget(targetElm);\n            const re = this.copyText();\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\n            return re && this.isCopySuccessInIE11();\n        } catch (error) {\n            return false;\n        }\n    }\n\n    /**\n     * This is a hack for IE11 to return `true` even if copy fails.\n     */\n    public isCopySuccessInIE11(): boolean {\n        const clipboardData = this.window['clipboardData'];\n        if (clipboardData && clipboardData.getData) {\n            if (!clipboardData.getData('Text')) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    public copyFromContent(content: string, container: HTMLElement = this.document.body): boolean {\n        // check if the temp textarea still belongs to the current container.\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n\n        if (!this.tempTextArea) {\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\n            try {\n                container.appendChild(this.tempTextArea);\n            } catch (error) {\n                throw new Error('Container should be a Dom element');\n            }\n        }\n        this.tempTextArea.value = content;\n\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n        if (this.config.cleanUpAfterCopy) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n        return toReturn;\n    }\n\n    /**\n     * Remove temporary textarea if any exists.\n     */\n    public destroy(container: HTMLElement = this.document.body): void {\n        if (this.tempTextArea) {\n            container.removeChild(this.tempTextArea);\n            // removeChild doesn't remove the reference from memory\n            this.tempTextArea = undefined;\n        }\n    }\n\n    /**\n     * Select the target html input element.\n     */\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\n        inputElement.select();\n        inputElement.setSelectionRange(0, inputElement.value.length);\n        return inputElement.value.length;\n    }\n\n    private copyText(): boolean {\n        return this.document.execCommand('copy');\n    }\n\n    /**\n     * Moves focus away from `target` and back to the trigger, removes current selection.\n     */\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement | undefined, window: Window): void {\n        inputElement && inputElement.focus();\n        window.getSelection()?.removeAllRanges();\n    }\n\n    /**\n     * Creates a fake textarea for copy command.\n     */\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n        let ta: HTMLTextAreaElement;\n        ta = doc.createElement('textarea');\n        // Prevent zooming on iOS\n        ta.style.fontSize = '12pt';\n        // Reset box model\n        ta.style.border = '0';\n        ta.style.padding = '0';\n        ta.style.margin = '0';\n        // Move element out of screen horizontally\n        ta.style.position = 'absolute';\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n        ta.style.top = yPosition + 'px';\n        ta.setAttribute('readonly', '');\n        return ta;\n    }\n\n    /**\n     * Pushes copy operation response to copySubject, to provide global access\n     * to the response.\n     */\n    public pushCopyResponse(response: IClipboardResponse): void {\n        if (this.copySubject.observers.length > 0) {\n            this.ngZone.run(() => {\n                this.copySubject.next(response);\n            });\n        }\n    }\n\n    /**\n     * @deprecated use pushCopyResponse instead.\n     */\n    public pushCopyReponse(response: IClipboardResponse): void {\n        this.pushCopyResponse(response);\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2\n} from '@angular/core';\n\nimport { IClipboardResponse } from './interface';\nimport { ClipboardService } from './ngx-clipboard.service';\n\n@Directive({ selector: '[ngxClipboard]' })\nexport class ClipboardDirective implements OnInit, OnDestroy {\n    // https://github.com/maxisam/ngx-clipboard/issues/239#issuecomment-623330624\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    @Input('ngxClipboard')\n    public targetElm: HTMLInputElement | HTMLTextAreaElement | undefined | '';\n    @Input()\n    public container: HTMLElement;\n\n    @Input()\n    public cbContent: string | undefined;\n\n    @Input()\n    public cbSuccessMsg: string;\n\n    @Output()\n    public cbOnSuccess: EventEmitter<IClipboardResponse> = new EventEmitter<IClipboardResponse>();\n\n    @Output()\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\n\n    private clickListener: () => void;\n\n    constructor(\n        private ngZone: NgZone,\n        private host: ElementRef<HTMLElement>,\n        private renderer: Renderer2,\n        private clipboardSrv: ClipboardService\n    ) {}\n\n    // eslint-disable-next-line no-empty, @typescript-eslint/no-empty-function\n    public ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            // By default each host listener schedules change detection and also wrapped\n            // into additional function that calls `markForCheck()`. We're listening the `click`\n            // event in the context of the root zone to avoid running unnecessary change detections,\n            // since this directive doesn't do anything template-related (e.g. updates template variables).\n            this.clickListener = this.renderer.listen(this.host.nativeElement, 'click', this.onClick);\n        });\n    }\n\n    public ngOnDestroy() {\n        if (this.clickListener) {\n            this.clickListener();\n        }\n        this.clipboardSrv.destroy(this.container);\n    }\n\n    private onClick = (event: MouseEvent): void => {\n        if (!this.clipboardSrv.isSupported) {\n            this.handleResult(false, undefined, event);\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n        } else if (this.cbContent) {\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n        }\n    };\n\n    /**\n     * Fires an event based on the copy operation result.\n     * @param succeeded\n     */\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: MouseEvent): void {\n        let response: IClipboardResponse = {\n            isSuccess: succeeded,\n            event\n        };\n\n        if (succeeded) {\n            if (this.cbOnSuccess.observers.length > 0) {\n                response = Object.assign(response, {\n                    content: copiedContent,\n                    successMessage: this.cbSuccessMsg\n                });\n                this.ngZone.run(() => {\n                    this.cbOnSuccess.emit(response);\n                });\n            }\n        } else {\n            if (this.cbOnError.observers.length > 0) {\n                this.ngZone.run(() => {\n                    this.cbOnError.emit(response);\n                });\n            }\n        }\n\n        this.clipboardSrv.pushCopyResponse(response);\n    }\n}\n","import { Directive, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { ClipboardService } from './ngx-clipboard.service';\n\n@Directive({\n    selector: '[ngxClipboardIfSupported]'\n})\nexport class ClipboardIfSupportedDirective implements OnInit {\n    constructor(\n        private _clipboardService: ClipboardService,\n        private _viewContainerRef: ViewContainerRef,\n        private _templateRef: TemplateRef<any>\n    ) {}\n\n    ngOnInit() {\n        if (this._clipboardService.isSupported) {\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ClipboardIfSupportedDirective } from './ngx-clipboard-if-supported.directive';\nimport { ClipboardDirective } from './ngx-clipboard.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n})\nexport class ClipboardModule {}\n","/*\n * Public API Surface of ngx-clipboard\n */\n\nexport * from './lib/ngx-clipboard.service';\nexport * from './lib/ngx-clipboard.directive';\nexport * from './lib/ngx-clipboard.module';\nexport * from './lib/ngx-clipboard-if-supported.directive';\nexport * from './lib/interface';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;;;;AAOA;;;MAIa,gBAAgB;IAMzB,YACY,MAAc,EACG,QAAa,EACF,MAAW;QAFvC,WAAM,GAAN,MAAM,CAAQ;QACG,aAAQ,GAAR,QAAQ,CAAK;QACF,WAAM,GAAN,MAAM,CAAK;QAR3C,gBAAW,GAAG,IAAI,OAAO,EAAsB,CAAC;QACjD,kBAAa,GAAmC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;QAE/E,WAAM,GAAoB,EAAE,CAAC;KAMjC;IAEG,SAAS,CAAC,MAAuB;QACpC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAEM,IAAI,CAAC,OAAe;QACvB,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,OAAO,EAAE;YAC/B,OAAO,IAAI,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;SAC/D;QACD,MAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACjD,IAAI,UAAU,EAAE;YACZ,OAAO,IAAI,CAAC,gBAAgB,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC;SACpE;QACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;KAC/D;IAED,IAAW,WAAW;QAClB,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;KAClH;IAEM,aAAa,CAAC,OAA+C;QAChE,IAAI,OAAO,YAAY,gBAAgB,IAAI,OAAO,YAAY,mBAAmB,EAAE;YAC/E,IAAI,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;gBAClC,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;aACxG;YACD,OAAO,IAAI,CAAC;SACf;QACD,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;KACzD;;;;IAKM,oBAAoB,CAAC,SAAiD,EAAE,OAAO,GAAG,IAAI;QACzF,IAAI;YACA,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAC7B,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC3B,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,SAAS,GAAG,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAClE,OAAO,EAAE,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC3C;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,KAAK,CAAC;SAChB;KACJ;;;;IAKM,mBAAmB;QACtB,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACnD,IAAI,aAAa,IAAI,aAAa,CAAC,OAAO,EAAE;YACxC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAChC,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,IAAI,CAAC;KACf;;;;;IAMM,eAAe,CAAC,OAAe,EAAE,YAAyB,IAAI,CAAC,QAAQ,CAAC,IAAI;;;QAG/E,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;YAC7D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,IAAI,SAAS,CAAC,CAAC;SAC9D;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACpB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACxE,IAAI;gBACA,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aAC5C;YAAC,OAAO,KAAK,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;aACxD;SACJ;QACD,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,OAAO,CAAC;QAElC,MAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACrE,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,IAAI,SAAS,CAAC,CAAC;SAC9D;QACD,OAAO,QAAQ,CAAC;KACnB;;;;IAKM,OAAO,CAAC,YAAyB,IAAI,CAAC,QAAQ,CAAC,IAAI;QACtD,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;;YAEzC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;SACjC;KACJ;;;;IAKO,YAAY,CAAC,YAAoD;QACrE,YAAY,CAAC,MAAM,EAAE,CAAC;QACtB,YAAY,CAAC,iBAAiB,CAAC,CAAC,EAAE,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC7D,OAAO,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC;KACpC;IAEO,QAAQ;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;KAC5C;;;;IAKO,cAAc,CAAC,YAAgE,EAAE,MAAc;;QACnG,YAAY,IAAI,YAAY,CAAC,KAAK,EAAE,CAAC;QACrC,MAAA,MAAM,CAAC,YAAY,EAAE,0CAAE,eAAe,EAAE,CAAC;KAC5C;;;;IAKO,kBAAkB,CAAC,GAAa,EAAE,MAAc;QACpD,MAAM,KAAK,GAAG,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC;QAChE,IAAI,EAAuB,CAAC;QAC5B,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;;QAEnC,EAAE,CAAC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;;QAE3B,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,EAAE,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;QACvB,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC;;QAEtB,EAAE,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;QAC/B,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,GAAG,MAAM,CAAC,GAAG,SAAS,CAAC;;QAE/C,MAAM,SAAS,GAAG,MAAM,CAAC,WAAW,IAAI,GAAG,CAAC,eAAe,CAAC,SAAS,CAAC;QACtE,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC;QAChC,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QAChC,OAAO,EAAE,CAAC;KACb;;;;;IAMM,gBAAgB,CAAC,QAA4B;QAChD,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;gBACZ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACnC,CAAC,CAAC;SACN;KACJ;;;;IAKM,eAAe,CAAC,QAA4B;QAC/C,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;KACnC;;6GAxKQ,gBAAgB,wCAQb,QAAQ,aACI,MAAM;iHATrB,gBAAgB,cADH,MAAM;2FACnB,gBAAgB;kBAD5B,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;8BASzB,MAAM;+BAAC,QAAQ;;8BACf,QAAQ;;8BAAI,MAAM;+BAAC,MAAM;;;;MCJrB,kBAAkB;IAsB3B,YACY,MAAc,EACd,IAA6B,EAC7B,QAAmB,EACnB,YAA8B;QAH9B,WAAM,GAAN,MAAM,CAAQ;QACd,SAAI,GAAJ,IAAI,CAAyB;QAC7B,aAAQ,GAAR,QAAQ,CAAW;QACnB,iBAAY,GAAZ,YAAY,CAAkB;QAXnC,gBAAW,GAAqC,IAAI,YAAY,EAAsB,CAAC;QAGvF,cAAS,GAAsB,IAAI,YAAY,EAAO,CAAC;QA6BtD,YAAO,GAAG,CAAC,KAAiB;YAChC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;aAC9C;iBAAM,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAC1E,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aAC1G;iBAAM,IAAI,IAAI,CAAC,SAAS,EAAE;gBACvB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aAC/G;SACJ,CAAC;KA5BE;;IAGG,QAAQ;QACX,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;;;;;YAK1B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC7F,CAAC,CAAC;KACN;IAEM,WAAW;QACd,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;QACD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC7C;;;;;IAgBO,YAAY,CAAC,SAAkB,EAAE,aAAiC,EAAE,KAAiB;QACzF,IAAI,QAAQ,GAAuB;YAC/B,SAAS,EAAE,SAAS;YACpB,KAAK;SACR,CAAC;QAEF,IAAI,SAAS,EAAE;YACX,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBACvC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE;oBAC/B,OAAO,EAAE,aAAa;oBACtB,cAAc,EAAE,IAAI,CAAC,YAAY;iBACpC,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;oBACZ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACnC,CAAC,CAAC;aACN;SACJ;aAAM;YACH,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;oBACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACjC,CAAC,CAAC;aACN;SACJ;QAED,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;KAChD;;+GAtFQ,kBAAkB;mGAAlB,kBAAkB;2FAAlB,kBAAkB;kBAD9B,SAAS;mBAAC,EAAE,QAAQ,EAAE,gBAAgB,EAAE;0KAK9B,SAAS;sBADf,KAAK;uBAAC,cAAc;gBAGd,SAAS;sBADf,KAAK;gBAIC,SAAS;sBADf,KAAK;gBAIC,YAAY;sBADlB,KAAK;gBAIC,WAAW;sBADjB,MAAM;gBAIA,SAAS;sBADf,MAAM;;;MC1BE,6BAA6B;IACtC,YACY,iBAAmC,EACnC,iBAAmC,EACnC,YAA8B;QAF9B,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,iBAAY,GAAZ,YAAY,CAAkB;KACtC;IAEJ,QAAQ;QACJ,IAAI,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE;YACpC,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SAChE;KACJ;;0HAXQ,6BAA6B;8GAA7B,6BAA6B;2FAA7B,6BAA6B;kBAHzC,SAAS;mBAAC;oBACP,QAAQ,EAAE,2BAA2B;iBACxC;;;MCKY,eAAe;;4GAAf,eAAe;6GAAf,eAAe,iBAHT,kBAAkB,EAAE,6BAA6B,aADtD,YAAY,aAEZ,kBAAkB,EAAE,6BAA6B;6GAElD,eAAe,YAJf,CAAC,YAAY,CAAC;2FAId,eAAe;kBAL3B,QAAQ;mBAAC;oBACN,OAAO,EAAE,CAAC,YAAY,CAAC;oBACvB,YAAY,EAAE,CAAC,kBAAkB,EAAE,6BAA6B,CAAC;oBACjE,OAAO,EAAE,CAAC,kBAAkB,EAAE,6BAA6B,CAAC;iBAC/D;;;ACVD;;;;ACAA;;;;;;"}