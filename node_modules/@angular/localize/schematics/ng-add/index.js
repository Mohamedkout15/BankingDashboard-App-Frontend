/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *
 * @fileoverview Schematics for ng-new project that builds with Bazel.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/localize/schematics/ng-add", ["require", "exports", "tslib", "@angular-devkit/core", "@angular-devkit/schematics", "@angular-devkit/schematics/tasks", "@schematics/angular/utility/dependencies", "@schematics/angular/utility/workspace", "@schematics/angular/utility/workspace-models"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.localizePolyfill = void 0;
    const tslib_1 = require("tslib");
    const core_1 = require("@angular-devkit/core");
    const schematics_1 = require("@angular-devkit/schematics");
    const tasks_1 = require("@angular-devkit/schematics/tasks");
    const dependencies_1 = require("@schematics/angular/utility/dependencies");
    const workspace_1 = require("@schematics/angular/utility/workspace");
    const workspace_models_1 = require("@schematics/angular/utility/workspace-models");
    exports.localizePolyfill = `import '@angular/localize/init';`;
    function getRelevantTargetDefinitions(project, builderName) {
        const definitions = [];
        project.targets.forEach((target) => {
            if (target.builder === builderName) {
                definitions.push(target);
            }
        });
        return definitions;
    }
    function getOptionValuesForTargetDefinition(definition, optionName) {
        const optionValues = [];
        if (definition.options && optionName in definition.options) {
            let optionValue = definition.options[optionName];
            if (typeof optionValue === 'string') {
                optionValues.push(optionValue);
            }
        }
        if (!definition.configurations) {
            return optionValues;
        }
        Object.values(definition.configurations)
            .forEach((configuration) => {
            if (configuration && optionName in configuration) {
                const optionValue = configuration[optionName];
                if (typeof optionValue === 'string') {
                    optionValues.push(optionValue);
                }
            }
        });
        return optionValues;
    }
    function getFileListForRelevantTargetDefinitions(project, builderName, optionName) {
        const fileList = [];
        const definitions = getRelevantTargetDefinitions(project, builderName);
        definitions.forEach((definition) => {
            const optionValues = getOptionValuesForTargetDefinition(definition, optionName);
            optionValues.forEach((filePath) => {
                if (fileList.indexOf(filePath) === -1) {
                    fileList.push(filePath);
                }
            });
        });
        return fileList;
    }
    function prependToTargetFiles(project, builderName, optionName, str) {
        return (host) => {
            const fileList = getFileListForRelevantTargetDefinitions(project, builderName, optionName);
            fileList.forEach((path) => {
                const data = host.read(path);
                if (!data) {
                    // If the file doesn't exist, just ignore it.
                    return;
                }
                const content = core_1.virtualFs.fileBufferToString(data);
                if (content.includes(exports.localizePolyfill) ||
                    content.includes(exports.localizePolyfill.replace(/'/g, '"'))) {
                    // If the file already contains the polyfill (or variations), ignore it too.
                    return;
                }
                // Add string at the start of the file.
                const recorder = host.beginUpdate(path);
                recorder.insertLeft(0, str);
                host.commitUpdate(recorder);
            });
        };
    }
    function moveToDependencies(host, context) {
        if (host.exists('package.json')) {
            // Remove the previous dependency and add in a new one under the desired type.
            (0, dependencies_1.removePackageJsonDependency)(host, '@angular/localize');
            (0, dependencies_1.addPackageJsonDependency)(host, {
                name: '@angular/localize',
                type: dependencies_1.NodeDependencyType.Default,
                version: `~14.3.0`
            });
            // Add a task to run the package manager. This is necessary because we updated
            // "package.json" and we want lock files to reflect this.
            context.addTask(new tasks_1.NodePackageInstallTask());
        }
    }
    function default_1(options) {
        return (host) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            // We favor the name option because the project option has a
            // smart default which can be populated even when unspecified by the user.
            const projectName = (_a = options.name) !== null && _a !== void 0 ? _a : options.project;
            if (!projectName) {
                throw new schematics_1.SchematicsException('Option "project" is required.');
            }
            const workspace = yield (0, workspace_1.getWorkspace)(host);
            const project = workspace.projects.get(projectName);
            if (!project) {
                throw new schematics_1.SchematicsException(`Invalid project name (${projectName})`);
            }
            const localizeStr = `/***************************************************************************************************
 * Load \`$localize\` onto the global scope - used if i18n tags appear in Angular templates.
 */
${exports.localizePolyfill}
`;
            return (0, schematics_1.chain)([
                prependToTargetFiles(project, workspace_models_1.Builders.Browser, 'polyfills', localizeStr),
                prependToTargetFiles(project, workspace_models_1.Builders.Server, 'main', localizeStr),
                // If `$localize` will be used at runtime then must install `@angular/localize`
                // into `dependencies`, rather than the default of `devDependencies`.
                options.useAtRuntime ? moveToDependencies : (0, schematics_1.noop)(),
            ]);
        });
    }
    exports.default = default_1;
});
//# sourceMappingURL=data:application/json;base64,